//
//  ChallengeViewController.m
//  Actinver_iOS
//
//  Created by Raymundo Pescador Piedra on 25/06/15.
//  Copyright (c) 2015 Sellcom Solutions. All rights reserved.
//

#import "ChallengeViewController.h"
#import "CustomizeControl.h"
#import "LoadingView.h"
#import "RequestManager.h"

@interface ChallengeViewController ()<ContainerEnrollmentDelegate,ResponseFromServicesDelegate>

@property (nonatomic, weak) Container *containerViewController;
@property int               transfer_flow;
@property int               registers_flow;

@end

@implementation ChallengeViewController
@synthesize Cancel;

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
}

- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:YES];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    
    if ([segue.identifier isEqualToString:@"embedContainer"]) {
        NSLog(@"Segue embed");
        _containerViewController                        = segue.destinationViewController;
        _containerViewController.delegate               = self;
        _containerViewController.processFlow            = TokenConfirmation;
        _containerViewController.additionalData         = [_challenge_info mutableCopy];
        _containerViewController.additionalDataArray    = _trans_data;
    }
    
    
    
}

#pragma mark - ContainerEnrollmentDelegate

-(void) updateHeaderIndex:(NSString *) header_text{
    NSLog(@"Update header");
}

-(void) hideHeader{
    NSLog(@"Hide header");
}

-(void) getBackMessageFromContainer{
    
    NSLog(@"In controller");
    
    [self performSegueWithIdentifier:@"unwindToTransactionMainView" sender:nil];
}

-(void) getForwardMessageFromContainerWithMessage:(MessageFromEnrollmentStep)messageType{
    
    // 0. Origin Contract
    // 1. Destination Contract
    // 2. Transaction Details
    // 3. Notify user Info
    NSDictionary    * origin_details;
    NSDictionary    * destination_details;
    NSDictionary    * transaction_details;
    
    if ([_trans_data count] <=2) {
       origin_details        = [_trans_data objectAtIndex:0];
       destination_details   = [_trans_data objectAtIndex:1];
    }else{
        origin_details        = [_trans_data objectAtIndex:0];
        destination_details   = [_trans_data objectAtIndex:1];
        transaction_details   = [_trans_data objectAtIndex:2];
    }

    
//    NSDictionary    * origin_details        = [_trans_data objectAtIndex:0];
//    NSDictionary    * destination_details   = [_trans_data objectAtIndex:1];
//    NSDictionary    * transaction_details   = [_trans_data objectAtIndex:2];
    

    
    if (messageType == kSendTransaction) {      // Recover the info, and send the transacion (token generated by challenge included)
//        
        NSString *result_challenge = [_containerViewController.additionalData objectForKey:@"challenge_result"];
        NSLog(@"Challenge Result: %@",result_challenge);
        NSLog(@"Details: %@",_trans_data);

        NSNull * null;
        
        
        if([[destination_details objectForKey:@"typeProcess"] isEqualToString:@"RegisterService"]){
            
            //_transfer_flow = Register_service; // Transfer_BasicServ
            _transfer_flow = Transfer_BasicServ;
            
//            NSMutableDictionary *params = [@{@"alias"                    :[destination_details objectForKey:@"companyName"],
//                                             @"amount"                   :[transaction_details objectForKey:@"amount"],
//                                             @"contractNumber"           :[origin_details      objectForKey:@"idContrato"],
//                                             @"language"                 :@"SPA",
//                                             @"operationCheckDigit"      :[destination_details objectForKey:@"operationCheckDigit"],
//                                             @"operationFeeId"           :[transaction_details objectForKey:@"operationFeeId"],
//                                             @"operationId"              :[transaction_details objectForKey:@"operationId"],
//                                             @"paymentReference"         :[transaction_details objectForKey:@"paymentReference"],
//                                             @"sku"                      :[destination_details objectForKey:@"sku"],
//                                             @"clientId"                 :[[RequestManager sharedInstance] userId],
//                                             @"ComissionReference"       :@"",
//                                             @"actiPassCode"             :result_challenge,
//                                             @"challengeRequestId"       :[[_containerViewController.additionalData objectForKey:@"outTokenChallengeByClientRequest"] objectForKey:@"sendingID"],
//                                             } mutableCopy];
//            
//            [params setObject:[origin_details objectForKey:@"contract_token"] forKey:@"append_key"];
            
            [[LoadingView loadingViewWithMessage:nil] show];
            
            [RequestManager sharedInstance].delegate = self;
            [[RequestManager sharedInstance] sendRequestWithData:[[NSMutableDictionary alloc] init]
                                                        toMethod:kRequestSendPayService isPost:YES];
            
            
        }

        
        if(_trans_data ==null){
        
            NSLog(@"input code of segue osvc");
            
            NSMutableDictionary *params = [[NSMutableDictionary alloc]init];
            [params setObject:[[RequestManager sharedInstance] NewvalueType]                      forKey:@"newValueType"];
            [params setObject:[[RequestManager sharedInstance] sendingid]                         forKey:@"sendingID"];
            [params setObject:[[Session sharedManager].pre_session_info objectForKey:@"username"] forKey:@"userId"];
            [params setObject:@"SPA"                                                              forKey:@"language"];
            
            [[RequestManager sharedInstance] setDelegate:self];
            [[RequestManager sharedInstance] sendRequestWithData:params toMethod:KValidateChallenge isPost:YES];
        
       
         //   [self performSegueWithIdentifier:@"segueProfile" sender:nil];
         
            
            
        }
        if ([[transaction_details objectForKey:@"typeProcess"] isEqualToString:@"transfer"]){   // Transaction
            
            _transfer_flow = Transfer_Actinver;

            NSMutableDictionary *params = [@{@"amount"                   :[transaction_details objectForKey:@"amount"],
                                             @"language"                 :@"SPA",
                                             @"transferDetails"          :[transaction_details objectForKey:@"transferDetails"],
                                             @"businessType"             :[transaction_details objectForKey:@"businessType"],
                                             @"destinationAccountTypeID" :[transaction_details objectForKey:@"destinationAccountTypeID"],
                                             @"contractNumber"           :[origin_details      objectForKey:@"idContrato"],
                                             @"actiPassCode"             :result_challenge,
                                             @"challengeRequestId"       :[[_containerViewController.additionalData objectForKey:@"outTokenChallengeByClientRequest"] objectForKey:@"sendingID"],
                                             
                                             } mutableCopy];
            
            if ([[transaction_details objectForKey:@"destinationAccountTypeID"] isEqualToString:@"2"]) {    // Actinver transaction
                NSString *destinationAccount = [destination_details objectForKey:@"idContrato"];
                //[params setObject:destinationAccount forKey:(@"destinationAccount")];
            }
            else{       // Other Banks transaction
                //[params setObject:[origin_details objectForKey:@"destinationAccount"] forKey:@"operationID"];
                [params setObject:origin_details forKey:@"destinationAccount"];
            }
            
            [params setObject:[origin_details objectForKey:@"contract_token"] forKey:@"append_key"];
            
            [[LoadingView loadingViewWithMessage:nil] show];
            [RequestManager sharedInstance].delegate = self;
            [[RequestManager sharedInstance] sendRequestWithData:params
                                                        toMethod:kRequestSendTransfer isPost:YES];
            
        }else if([[transaction_details objectForKey:@"typeProcess"] isEqualToString:@"payService"]){
            
            _transfer_flow = Transfer_BasicServ;
            
            NSMutableDictionary *params = [@{@"alias"                    :[destination_details objectForKey:@"companyName"],
                                             @"amount"                   :[transaction_details objectForKey:@"amount"],
                                             @"contractNumber"           :[origin_details      objectForKey:@"idContrato"],
                                             @"language"                 :@"SPA",
                                             @"operationCheckDigit"      :[destination_details objectForKey:@"operationCheckDigit"],
                                             @"operationFeeId"           :[transaction_details objectForKey:@"operationFeeId"],
                                             @"operationId"              :[transaction_details objectForKey:@"operationId"],
                                             @"paymentReference"         :[transaction_details objectForKey:@"paymentReference"],
                                             @"sku"                      :[destination_details objectForKey:@"sku"],
                                             @"clientId"                 :[[RequestManager sharedInstance] userId],
                                             @"ComissionReference"       :@"",
                                             @"actiPassCode"             :result_challenge,
                                             @"challengeRequestId"       :[[_containerViewController.additionalData objectForKey:@"outTokenChallengeByClientRequest"] objectForKey:@"sendingID"],
                                             } mutableCopy];
            
            [params setObject:[origin_details objectForKey:@"contract_token"] forKey:@"append_key"];
            
            [[LoadingView loadingViewWithMessage:nil] show];
            
            [RequestManager sharedInstance].delegate = self;
            [[RequestManager sharedInstance] sendRequestWithData:[[NSMutableDictionary alloc] init]
                                                        toMethod:kRequestSendPayService isPost:YES];
            
            
        }
        else if ([[transaction_details objectForKey:@"typeProcess"] isEqualToString:@"payCreditCard"]){
            
            _transfer_flow = Pay_CredictCard;
            

            
            [[LoadingView loadingViewWithMessage:nil] show];
            
            [RequestManager sharedInstance].delegate = self;
            [[RequestManager sharedInstance] sendRequestWithData:[[NSMutableDictionary alloc] init]
                                                        toMethod:KRequestSendPayCreditCard isPost:YES];
            
            
        }
        else {

        


        }
        
    }
    
    
}

#pragma mark - RequestManager Delegate

-(void)responseFromService:(NSMutableDictionary *)response{
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [LoadingView close];
        
        #warning Validate the result is nil (Network error)
        if ([response objectForKey:@"act_net_error"] != NULL) {
            
            return;
        }
        
        #warning Validate the result (Actinver success messages)
        if (_transfer_flow == Transfer_Actinver) {
            if ([[[response objectForKey:@"outTransferRequest"]objectForKey:@"transferResult"] objectForKey:@"operationReference"] == nil) {
                
            }
            else{
                _containerViewController.additionalData = response;
                [_containerViewController swapViewControllers:YES];
            }
        }
        else if (_transfer_flow == Transfer_BasicServ) {
            if ([[[response objectForKey:@"outServicePaymentRequest"]objectForKey:@"paymentResult"] objectForKey:@"authorizationCode"] == nil) {
                NSLog(@"Services, no response");
            }
            else  {
                _containerViewController.additionalData = response;
                [_containerViewController swapViewControllers:YES];
            }
        }
        else if ([[[response objectForKey:@"outCommonHeader" ]objectForKey:@"operationName"] isEqualToString:@"PasswordModification"]){
        
        
        
        }
        
        else if (_transfer_flow == Pay_CredictCard) {
            if ([[[[response objectForKey:@"outCreditCardPayment"]objectForKey:@"outUBCreditCardPayment"] objectForKey:@"paymentResult"] objectForKey:@"paymentReference"] == nil) {
                NSLog(@"Services, no response");
            }
            else{
                _containerViewController.additionalData = response;
                [_containerViewController swapViewControllers:YES];
            }
        }
        else if (_transfer_flow == Register_service) {
            if ([[[[response objectForKey:@"outCreditCardPayment"]objectForKey:@"outUBCreditCardPayment"] objectForKey:@"paymentResult"] objectForKey:@"paymentReference"] == nil) {
                NSLog(@"Services, no response");
            }
            else{
                _containerViewController.additionalData = response;
                [_containerViewController swapViewControllers:YES];
            }
        }

        NSLog(@"method code   = %d",[[response objectForKeyedSubscript:@"method_code"] intValue]);
        
        if ([[response objectForKeyedSubscript:@"method_code"] intValue] == KValidateChallenge ) { // KValidateChallenge sft23
        
            if ( [[[[[[response objectForKey:@"outCommonHeader"] objectForKey:@"result"] objectForKey:@"messages"] objectAtIndex:0] objectForKey:@"responseMessage"]isEqualToString:@"EXITO"]) {
            
                NSLog(@"new pass = %@",[[RequestManager sharedInstance ] n_password] );
                
                
                if([[[RequestManager sharedInstance]n_password] isEqualToString:@""]){
                    
                    if ([[[RequestManager sharedInstance] cellPhone] isEqualToString:@""]){//pra04
                        
                        NSMutableDictionary *params = [@{@"clientId"             :[[Session sharedManager].pre_session_info objectForKey:@"username"],
                                                         @"answerSecretQuestion"        :@"1" ,
                                                         @"graphk12345678TokenId"       :@"4",
                                                         @"helpWord"          : @"1",
                                                         @"secretQuestionId"  : @"1",
                                                         @"language"          : @"SPA"
                                                         } mutableCopy];
                        
                        
                        [[LoadingView loadingViewWithMessage:nil] show];
                        
                        [RequestManager sharedInstance].delegate = self;
                        [[RequestManager sharedInstance] sendRequestWithData: params
                                                                    toMethod:KChangeImageSecurity isPost:YES];
                        
                        
                    
                    }else{
                    
                    //pra03
                NSMutableDictionary *params = [@{@"clientId"             :[[Session sharedManager].pre_session_info objectForKey:@"username"],
                                                     @"oldPassword"             : [[Session sharedManager].pre_session_info objectForKey:@"password"],
                                                     @"newPassword"          :[[RequestManager sharedInstance ] n_password],
                                                     @"language"          : @"SPA"
                                                     } mutableCopy];
            
                   //[params setObject:[origin_details objectForKey:@"contract_token"] forKey:@"append_key"];
            
                    [[LoadingView loadingViewWithMessage:nil] show];
            
                    [RequestManager sharedInstance].delegate = self;
                    [[RequestManager sharedInstance] sendRequestWithData: params
                                                                toMethod:kChanguePassWord isPost:YES];

                [_containerViewController swapViewControllers:YES];
            }
                }else{
                    NSLog(@"email = %@",[[RequestManager sharedInstance]email]);
                    if ( [[[RequestManager sharedInstance] email] isEqualToString:@"no hay email"] ) {//pra04
                        
                        
                                                NSMutableDictionary *params = [@{@"clientId"             :[[Session sharedManager].pre_session_info objectForKey:@"username"],
                                                                                 @"answerSecretQuestion"        :@"1" ,
                                                                                 @"graphk12345678TokenId"       :@"4",
                                                                                 @"helpWord"          : @"1",
                                                                                 @"secretQuestionId"  : @"1",
                                                                                 @"language"          : @"SPA"
                                                                                 } mutableCopy];
                        
                        
                                                [[LoadingView loadingViewWithMessage:nil] show];
                        
                                                [RequestManager sharedInstance].delegate = self;
                                                [[RequestManager sharedInstance] sendRequestWithData: params
                                                                                            toMethod:KChangeImageSecurity isPost:YES];
                                                
                                                [_containerViewController swapViewControllers:YES];
                                            
                                          
                        
                    }else{//pra09
                    NSMutableDictionary *params = [@{@"clientId"             :[[Session sharedManager].pre_session_info objectForKey:@"username"],
                                                     @"cellPhone"             : [[RequestManager sharedInstance] cellPhone],
                                                     @"emailTo"          :[[RequestManager sharedInstance ] email],
                                                     @"language"          : @"SPA"
                                                     } mutableCopy];
                    
                    
                    [[LoadingView loadingViewWithMessage:nil] show];
                    
                    [RequestManager sharedInstance].delegate = self;
                    [[RequestManager sharedInstance] sendRequestWithData: params
                                                                toMethod:KchangeNotification isPost:YES];
                
                  [_containerViewController swapViewControllers:YES];
                    
                    
                    }
                    
                }
            }
        }

    });
}


/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
